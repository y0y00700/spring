Singleton Pattern 

static 영역에 객체 instance를 미리 하나 생성하여 올려둠

이 객체 인스턴스가 오직 getInstance() 메소드를 통해서만 조회가능 
이 메소드를 호출하면 항상 같은 인스턴스를 반환

딱 1개의 객체 인스턴스만 존재해야 하므로 생성자를 private 로 막아서 
외부에서 new 키워드를 통한 생성을 막는다.

싱글톤의 문제
1.싱글톤 패턴을 구현하는 코드 자체가 많이 들어감.
2.의존관계상 클라이언트가 구체 클래스에 의존 -> DIP 위반
3.클라이언트가 구체 클래스에 의존해서  OCP 원칙 위반 가능성이 높음.
4.테스트하기 어려움
5.내부 속성을 변경하거나 초기화 하기 어렵다.
6.private 생성자로 자식 클래스를 만들기 어렵다.
7.결론적으로 유연성이 떨어짐
8.안티패턴으로 불리기도 한다.

Singleton Container
스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서, 객체 인스턴스를 싱글톤으로 관리한다.

스프링 컨테이너 = 싱글톤 컨테이너 
객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라 한다.

SIngleton 방식의 주의점
무상태로 설계해야 함.
가급적 읽기만 가능해야 한다.
예시 코드 : StatefulService.java ,StatefulServiceTest.java 참조

특정 클라이언트에 의존적인 필드가 있으면 안된다.
특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.
필드 대신에 자바에서 공유되지 않는 지역변수 파라미터 ThreadLocal 등을 사용해야 한다.
