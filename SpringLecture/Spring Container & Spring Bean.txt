스프링 컨테이너 생성

ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

스프링 컨테이너는 XML 로도 만들 수 있고, 
애노테이션 기반의 자바 설정 클래스로 만들 수 있다.

전체 스프링 빈 조회하기

스프링 빈 조회 - 기본
 1.ac.getBean(빈이름 , 타입) 
 2.ac.getBean(타입) 

조회 대상 없으면 ?  NoSuchBean ... 


스프링 빈 조회 - 상속관계
부모타입으로 조회하면 자식 타입도 함께 조회함
그래서 모든 자바 객체의 최고 부모인 Object 타입으로 조회하면 모든 스프링 빈을 조회한다.

BeanFactory 와 ApplicationContext


BeanFactory 
  스프링 컨테이너의 최상위 인터페이스
  스프링 빈을 관리하고 조회하는 역할을 담당한다.
  getBean() 과 같은 메소드를 제공
  
ApplicationContext
  BeanFactory 기능을 상속 받아서 제공한다.
  빈을 관리하고 검색하는 기능을 BeanFactory가 제공해준다.
  애플리케이션을 개발할 때는 빈을 관리하고 조회하는 기능 뿐 아니라 다른 부가기능이 필요하다.

ApplicationContext 가 제공하는 부가기능 
  MessageSource : 설정에 따른 언어 출력 기능(en , ko 등..) 
  EnvironmentCapable : 로컬 개발 운영등을 구분해서 처리하는 기능
  ApplicationEventPublisher : 이벤트를 발행하고 구독하는 모델 지원
  ResourceLoader : 파일 , 클래스패스 , 외부 등에서 리소스를 편리하게 조회 

요약 
  ApplicationContext는 BeanFactory 기능을 상속받는다.
  ApplicationContext는 빈 관리 기능 외 편리한 부가 기능을 제공한다.
  BeanFactory를 직접 사용할 일은 거의 없다. 부가 기능이 포함된 ApplicationContext를 사용한다.
  BeanFactory나 ApplicationContext를 스프링 컨테이너라 한다. 

XML 로 빈 설정
 1.src/main/resources -> appConfig.xml 설정 
 2.test 코드 작성하여 해당 appConfig 호출 및 테스트

BeanDefinition
스프링 컨테이너는 BeanDefinition이라는 추상화가 있다.

BeanDefinition 정보
**
 **
 BeanDefinition
 `
 BeanClassName: 생성할 빈의 클래스 명(자바 설정 처럼 팩토리 역할의 빈을 사용하면 없음)
 factoryBeanName: 팩토리 역할의 빈을 사용할 경우 이름, 예) appConfig
 factoryMethodName: 빈을 생성할 팩토리 메서드 지정, 예) memberService
 Scope: 싱글톤(기본값)
을 생성하`
 lazyInit: 스프링 컨테이너를 생성할 때 빈을 생성하는 것이 아니라, 실제 빈을 사용할 때 까지 최대한 생성을 지연
처리 하는지 여부
InitMethodName: 빈을 생성하고, 의존관계를 적용한 뒤에 호출되는 초기화 메서드 명
DestroyMethodName: 빈의 생명주기가 끝나서 제거하기 직전에 호출되는 메서드 명
Constructor arguments, Properties: 의존관계 주입에서 사용한다. (자바 설정 처럼 팩토리 역할의 빈을 사용
하면 없음)

BeanDefinition을 직접 생성해서 스프링 컨테이너에 등록할 수 있다.
하지만 실무에서 사용할 일은 거의 없다.